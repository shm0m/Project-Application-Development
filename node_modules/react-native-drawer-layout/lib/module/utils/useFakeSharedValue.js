"use strict";

function _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError("Cannot call a class as a function"); }
function _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, "value" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }
function _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, "prototype", { writable: !1 }), e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import * as React from 'react';
let FakeSharedValue = /*#__PURE__*/function () {
  function FakeSharedValue(_value) {
    _classCallCheck(this, FakeSharedValue);
    _defineProperty(this, "_listeners", new Map());
    _defineProperty(this, "_value", void 0);
    _defineProperty(this, "_isReanimatedSharedValue", true);
    this._value = _value;
  }
  return _createClass(FakeSharedValue, [{
    key: "addListener",
    value: function addListener(id, listener) {
      this._listeners.set(id, listener);
    }
  }, {
    key: "removeListener",
    value: function removeListener(id) {
      this._listeners.delete(id);
    }
  }, {
    key: "modify",
    value: function modify(modifier) {
      this.value = modifier !== undefined ? modifier(this.value) : this.value;
    }
  }, {
    key: "value",
    get: function () {
      return this._value;
    },
    set: function (value) {
      this._value = value;
      for (const listener of this._listeners.values()) {
        listener(value);
      }
    }
  }]);
}();
/**
 * Compatibility layer for `useDrawerProgress` with `react-native-reanimated`
 */
export function useFakeSharedValue(value) {
  const sharedValue = React.useRef(null);
  if (sharedValue.current === null) {
    sharedValue.current = new FakeSharedValue(value);
  }
  return sharedValue.current;
}
//# sourceMappingURL=useFakeSharedValue.js.map